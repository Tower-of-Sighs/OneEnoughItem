plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven {
        // Add curse maven to repositories
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        // Patchouli
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven { // for Porting Lib: Fabric ASM
        url = "https://jitpack.io/"
    }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://nexus.resourcefulbees.com/repository/maven-public/"}
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
}

def portingLibModules = [
        "common", "items", "fluids", "extensions", "tags", "recipe_book_categories",
        "entity", "tool_actions", "transfer", "registries", "lazy_registration",
        "data", "model_builders", "model_generators", "model_loader", "model_materials",
        "models", "networking", "utility", "base", "blocks", "client_events", "level_events",
        "loot"
]

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modCompileOnly ("mezz.jei:jei-1.20.1-fabric-api:15.20.0.104")
    modImplementation ("mezz.jei:jei-1.20.1-fabric:15.20.0.104")

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "curse.maven:oelib-1319210:6875022"
    modImplementation "curse.maven:architectury-api-419699:5137936"
    modImplementation "curse.maven:jupiter-1072905:6843040"
//    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}" // SlashBlade
//    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}"
//    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
//    modImplementation files("libs/FarmersDelight-1.20.1-2.4.0+refabricated.jar")
//    modImplementation "curse.maven:slashblade-refabricated-1324741:6914777"
//    modImplementation "curse.maven:forge-config-api-port-fabric-547434:6325013"
//    portingLibModules.each {
//        modImplementation("io.github.fabricators_of_create.Porting-Lib:${it}:${port_version}")
//    }
//    modImplementation("com.github.Chocohead:Fabric-ASM:${fabric_asm_version}") {
//        exclude (group: "net.fabricmc.fabric-api")
//    }
}

loom {
    accessWidenerPath = file("src/main/resources/oneenoughitem.accesswidener")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    
    exclude 'data/oneenoughitem/replacements/example.json'
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}